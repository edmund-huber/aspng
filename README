aspng: application-specific PNG
-------------------------------

Have you ever wanted to design a CPU with Paint? Well now you can!

`aspng` allows you to draw out digital circuits using pixels, and then simulate
those circuits.


Examples
--------

TODO


Design guide
------------
[0, 0, 0]        background
[255, 255, 255]  source
#595652           sink
copper 1, 2      copper  (@runtime, either light gray or dark gray, 2x for different types)
copper 3         bridge  (stays copper @ runtime)
_purple_         transistor
_yellow_ _source_   pullup
_yellow_ _sink_   pulldown
_coral_/(yellow)  capacitor (@runtime, this color & darker color)
green            template: LED, clock (also color for bonding)
(not: red) + (and: greien2, or: blue, xor: cyan)   gates

recommended: aseprite. If you use aseprite, you can use palette.aseprite . It
has the above palette, laid out in order.

capacitance - either "0" or "1" (logical), and no other component (including copper has capacitance)
  -- how does it work? does it drain?(yes)
     . provides 0 or 1 voltage
     . settles to whatever the value of the net is
... should this just be a behavior of copper?
   -- no

specific components i want to be able to do:
gates - in NMOS style, in CMOS style
sram
dram
mask rom
adder
shift register
latch
flipflop
clock divider


Goals of `aspng`
----------------

Simulate with tristate logic:

As the name ("aspng") suggests, I want to draw a somewhat direct parallel to
ASIC design. ASICs are electrical devices, and don't operate exactly as logical
networks do. They use tristate logic -- so in addition to "0" and "1", there is
"Z"/"high impedance" -- and the concepts of "pullup" and "pulldown" and
floating voltages. I feel like I need these concepts to have any (however
small) sense of authenticity.

However! I am not interested in (and not capable of writing a program of)
simulating power consumption, or switching delay, or parasitic capacitances, or
leakage, or any of those very real effects that true digital simulators have to
consider. This is where I drew the line. I view `aspng` as a way to draft up
and play with imaginary digital circuits, while leaving correct physical
simulations for other programs.

Be able to simulate the 4004, and 6502.

Ultimately, build an entire small computer and OS "in silico".

It might be fun to put together an "Advent of Code" -like thing for "make a
little CPU"?

Clarity of code before speed.


Related projects / inspiration
------------------------------

<http://www.visual6502.org/>
<https://github.com/onidev/TICS>
